Approach 1:

    class Sawo {

        string APIKEY;

        // make constructor take api key
        Sawo(API KEY ID)

        // make method which takes BuildContext: Context
        void loginWithEmail(BuildContext){
            // Navigator to push will be called, which is reponsible to show the webview
            and on result we'll call the callback
        }
    }


    Class NavigatorPushWebView {
        return Scafold of Webview
        when we get the callback from the webview we'll trigger the callback of the client success and failure method
    }







Main Class


// initiating the class object
Sawo sawo = new Sawo(key:1313131)


// as user invoked this user will get pushed to another url with webview and redirect back to the client callback

// communication from the javascript to flutter package
https://stackoverflow.com/questions/53689662/flutter-webview-two-way-communication-with-javascript

// Webview example
https://medium.com/@ekosuprastyo15/webview-in-flutter-example-a11a24eb617f

// webview example with button clicked
https://blog.geekyants.com/webviews-in-flutter-87194714ce3d

// execute js code from flutter webview
 // When you click at this button youll run js code and youll see alert
            _webViewController
                .evaluateJavascript('window.function ()');


sawo.loginWithEmail({
    redirectURL: '',
    email: ''
}) 


sawo.loginWithPhone({
    redirectURL: '',
    phone: ''
    sucessCallback 
    failureCallback
})

broswer will popup with the url
add event listner on the sucess or failure
on success redirect to success callback 
on failure redirect to failure callback

call callback with the payload either sucess or failure
